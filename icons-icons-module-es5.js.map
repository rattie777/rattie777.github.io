{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/clipboard.js","webpack:///node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js","webpack:///src/app/icons/icons-routing.module.ts","webpack:///src/app/icons/icons.component.ts","webpack:///src/app/icons/icons.component.html","webpack:///src/app/icons/icons.module.ts"],"names":["PendingCopy","text","_document","textarea","_textarea","createElement","styles","style","opacity","position","left","top","setAttribute","value","body","appendChild","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","focus","_a","parentNode","removeChild","undefined","Clipboard","document","pendingCopy","beginCopy","copy","destroy","ɵfac","Clipboard_Factory","t","ctorParameters","type","decorators","args","ɵprov","factory","token","providedIn","CdkCopyToClipboardConfig","CKD_COPY_TO_CLIPBOARD_CONFIG","CdkCopyToClipboard","_clipboard","_ngZone","config","attempts","copied","_deprecatedCopied","_pending","Set","remainingAttempts","pending","add","attempt","_destroyed","_currentTimeout","runOutsideAngular","setTimeout","emit","clearTimeout","forEach","clear","CdkCopyToClipboard_Factory","ɵdir","selectors","hostBindings","CdkCopyToClipboard_HostBindings","rf","ctx","CdkCopyToClipboard_click_HostBindingHandler","inputs","outputs","propDecorators","selector","host","ClipboardModule","ɵmod","ɵinj","ClipboardModule_Factory","ngJitMode","declarations","exports","HttpHandler","HttpBackend","Update","HttpHeaders","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","line","index","indexOf","name","slice","key","toLowerCase","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","init","Array","from","clone","op","lcName","copyFrom","update","applyUpdate","other","concat","base","toDelete","existing","filter","fn","HttpParameterCodec","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","paramParser","rawParams","codec","map","params","param","eqIdx","decodeKey","decodeValue","val","list","v","encodeURIComponent","replace","Update$1","HttpParamsOptions","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","eKey","encodeKey","encodeValue","join","idx","splice","HttpRequestInit","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","url","third","fourth","reportProgress","withCredentials","responseType","toUpperCase","urlWithParams","toString","qIdx","sep","JSON","stringify","setHeaders","reduce","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","HttpProgressEvent","HttpDownloadProgressEvent","HttpUploadProgressEvent","HttpSentEvent","HttpUserEvent","HttpJsonParseError","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","HttpResponse","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","first","req","events$","pipe","handle","res$","event","request","callbackParam","append","HttpClient_Factory","HttpInterceptor","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","NoopInterceptor_Factory","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","observer","callback","nextCallback","node","src","finished","cancelled","data","cleanup","onLoad","complete","onError","addEventListener","removeEventListener","JsonpClientBackend_Factory","JsonpInterceptor","jsonp","JsonpInterceptor_Factory","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","XhrFactory","BrowserXhr","XMLHttpRequest","BrowserXhr_Factory","PartialResponse","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","upload","send","abort","HttpXhrBackend_Factory","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","HttpXsrfCookieExtractor_Factory","String","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","getToken","HttpXsrfInterceptor_Factory","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpInterceptingHandler_Factory","interceptingHandler","jsonpCallbackContext","window","HttpClientXsrfModule","ngModule","providers","provide","useClass","useValue","HttpClientXsrfModule_Factory","useExisting","multi","HttpClientModule","HttpClientModule_Factory","imports","withOptions","HttpClientJsonpModule","HttpClientJsonpModule_Factory","useFactory","routes","path","component","IconsRoutingModule","forChild","IconsComponent","lineIcons","icons8","hostname","location","visibleCategory","icon","visibleCategoryName","category","templateUrl","styleUrls","IconsModule"],"mappings":"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","file":"icons-icons-module-es5.js","sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { Injectable, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/clipboard/pending-copy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nimport * as ɵngcc0 from '@angular/core';\nclass PendingCopy {\n    /**\n     * @param {?} text\n     * @param {?} _document\n     */\n    constructor(text, _document) {\n        this._document = _document;\n        /** @type {?} */\n        const textarea = this._textarea = this._document.createElement('textarea');\n        /** @type {?} */\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set an\n        // absolute position so the page layout isn't affected.\n        styles.opacity = '0';\n        styles.position = 'absolute';\n        styles.left = styles.top = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        this._document.body.appendChild(textarea);\n    }\n    /**\n     * Finishes copying the text.\n     * @return {?}\n     */\n    copy() {\n        /** @type {?} */\n        const textarea = this._textarea;\n        /** @type {?} */\n        let successful = false;\n        try { // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                /** @type {?} */\n                const currentFocus = (/** @type {?} */ (this._document.activeElement));\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch (_a) {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /**\n     * Cleans up DOM changes used to perform the copy operation.\n     * @return {?}\n     */\n    destroy() {\n        /** @type {?} */\n        const textarea = this._textarea;\n        if (textarea) {\n            if (textarea.parentNode) {\n                textarea.parentNode.removeChild(textarea);\n            }\n            this._textarea = undefined;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    PendingCopy.prototype._textarea;\n    /**\n     * @type {?}\n     * @private\n     */\n    PendingCopy.prototype._document;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/clipboard/clipboard.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param {?} text The string to copy.\n     * @return {?} Whether the operation was successful.\n     */\n    copy(text) {\n        /** @type {?} */\n        const pendingCopy = this.beginCopy(text);\n        /** @type {?} */\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param {?} text The string to copy.\n     * @return {?} the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = function Clipboard_Factory(t) { return new (t || Clipboard)(ɵngcc0.ɵɵinject(DOCUMENT)); };\n/** @nocollapse */\nClipboard.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ Clipboard.ɵprov = ɵɵdefineInjectable({ factory: function Clipboard_Factory() { return new Clipboard(ɵɵinject(DOCUMENT)); }, token: Clipboard, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Clipboard, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Clipboard.prototype._document;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/clipboard/copy-to-clipboard.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object that can be used to configure the default options for `CdkCopyToClipboard`.\n * @record\n */\nfunction CdkCopyToClipboardConfig() { }\nif (false) {\n    /**\n     * Default number of attempts to make when copying text to the clipboard.\n     * @type {?|undefined}\n     */\n    CdkCopyToClipboardConfig.prototype.attempts;\n}\n/**\n * Injection token that can be used to provide the default options to `CdkCopyToClipboard`.\n * @type {?}\n */\nconst CKD_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CKD_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    /**\n     * @param {?} _clipboard\n     * @param {?=} _ngZone\n     * @param {?=} config\n     */\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /**\n         * Content to be copied.\n         */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         * @deprecated Use `cdkCopyToClipboardCopied` instead.\n         * \\@breaking-change 10.0.0\n         */\n        this._deprecatedCopied = this.copied;\n        /**\n         * Copies that are currently being attempted.\n         */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /**\n     * Copies the current text to the clipboard.\n     * @param {?=} attempts\n     * @return {?}\n     */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            /** @type {?} */\n            let remainingAttempts = attempts;\n            /** @type {?} */\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            /** @type {?} */\n            const attempt = (/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // @breaking-change 10.0.0 Remove null check for `_ngZone`.\n                    if (this._ngZone) {\n                        this._currentTimeout = this._ngZone.runOutsideAngular((/**\n                         * @return {?}\n                         */\n                        () => setTimeout(attempt, 1)));\n                    }\n                    else {\n                        // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                        this._currentTimeout = setTimeout(attempt, 1);\n                    }\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            });\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach((/**\n         * @param {?} copy\n         * @return {?}\n         */\n        copy => copy.destroy()));\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) { return new (t || CdkCopyToClipboard)(ɵngcc0.ɵɵdirectiveInject(Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(CKD_COPY_TO_CLIPBOARD_CONFIG, 8)); };\nCdkCopyToClipboard.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCopyToClipboard, selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]], hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() { return ctx.copy(); });\n    } }, inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\", _deprecatedCopied: \"copied\" } });\n/** @nocollapse */\nCdkCopyToClipboard.ctorParameters = () => [\n    { type: Clipboard },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CKD_COPY_TO_CLIPBOARD_CONFIG,] }] }\n];\nCdkCopyToClipboard.propDecorators = {\n    text: [{ type: Input, args: ['cdkCopyToClipboard',] }],\n    attempts: [{ type: Input, args: ['cdkCopyToClipboardAttempts',] }],\n    copied: [{ type: Output, args: ['cdkCopyToClipboardCopied',] }],\n    _deprecatedCopied: [{ type: Output, args: ['copied',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkCopyToClipboard, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkCopyToClipboard]',\n                host: {\n                    '(click)': 'copy()'\n                }\n            }]\n    }], function () { return [{ type: Clipboard }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n            }] }]; }, { text: [{\n            type: Input,\n            args: ['cdkCopyToClipboard']\n        }], attempts: [{\n            type: Input,\n            args: ['cdkCopyToClipboardAttempts']\n        }], copied: [{\n            type: Output,\n            args: ['cdkCopyToClipboardCopied']\n        }], _deprecatedCopied: [{\n            type: Output,\n            args: ['copied']\n        }] }); })();\nif (false) {\n    /**\n     * Content to be copied.\n     * @type {?}\n     */\n    CdkCopyToClipboard.prototype.text;\n    /**\n     * How many times to attempt to copy the text. This may be necessary for longer text, because\n     * the browser needs time to fill an intermediate textarea element and copy the content.\n     * @type {?}\n     */\n    CdkCopyToClipboard.prototype.attempts;\n    /**\n     * Emits when some text is copied to the clipboard. The\n     * emitted value indicates whether copying was successful.\n     * @type {?}\n     */\n    CdkCopyToClipboard.prototype.copied;\n    /**\n     * Emits when some text is copied to the clipboard. The\n     * emitted value indicates whether copying was successful.\n     * @deprecated Use `cdkCopyToClipboardCopied` instead.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    CdkCopyToClipboard.prototype._deprecatedCopied;\n    /**\n     * Copies that are currently being attempted.\n     * @type {?}\n     * @private\n     */\n    CdkCopyToClipboard.prototype._pending;\n    /**\n     * Whether the directive has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkCopyToClipboard.prototype._destroyed;\n    /**\n     * Timeout for the current copy attempt.\n     * @type {?}\n     * @private\n     */\n    CdkCopyToClipboard.prototype._currentTimeout;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkCopyToClipboard.prototype._clipboard;\n    /**\n     * @deprecated _ngZone parameter to become required.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     * @private\n     */\n    CdkCopyToClipboard.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/clipboard/clipboard-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ClipboardModule });\nClipboardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ClipboardModule_Factory(t) { return new (t || ClipboardModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, { declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkCopyToClipboard],\n                exports: [CdkCopyToClipboard]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/clipboard/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n\n//# sourceMappingURL=clipboard.js.map","/**\n * @license Angular v9.1.12\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/backend.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@publicApi\n * @abstract\n */\nimport * as ɵngcc0 from '@angular/core';\nclass HttpHandler {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpHandler.prototype.handle = function (req) { };\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpBackend {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpBackend.prototype.handle = function (req) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/headers.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\nfunction Update() { }\nif (false) {\n    /** @type {?} */\n    Update.prototype.name;\n    /** @type {?|undefined} */\n    Update.prototype.value;\n    /** @type {?} */\n    Update.prototype.op;\n}\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * \\@publicApi\n */\nclass HttpHeaders {\n    /**\n     * Constructs a new HTTP header object with the given values.\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach((/**\n                 * @param {?} line\n                 * @return {?}\n                 */\n                line => {\n                    /** @type {?} */\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        /** @type {?} */\n                        const name = line.slice(0, index);\n                        /** @type {?} */\n                        const key = name.toLowerCase();\n                        /** @type {?} */\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            (/** @type {?} */ (this.headers.get(key))).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                }));\n            });\n        }\n        else {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach((/**\n                 * @param {?} name\n                 * @return {?}\n                 */\n                name => {\n                    /** @type {?} */\n                    let values = headers[name];\n                    /** @type {?} */\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                }));\n            });\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param {?} name The header name to check for existence.\n     *\n     * @return {?} True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param {?} name The header name.\n     *\n     * @return {?} The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        /** @type {?} */\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @return {?} A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param {?} name The header name from which to retrieve values.\n     *\n     * @return {?} A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param {?} name The header name for which to append the values.\n     * @param {?} value The value to append.\n     *\n     * @return {?} A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param {?} name The header name.\n     * @param {?} value The value or values to set or overide for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param {?} name The header name.\n     * @param {?=} value The value or values to delete for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach((/**\n                 * @param {?} update\n                 * @return {?}\n                 */\n                update => this.applyUpdate(update)));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} other\n     * @return {?}\n     */\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            this.headers.set(key, (/** @type {?} */ (other.headers.get(key))));\n            this.normalizedNames.set(key, (/** @type {?} */ (other.normalizedNames.get(key))));\n        }));\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    applyUpdate(update) {\n        /** @type {?} */\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                /** @type {?} */\n                let value = (/** @type {?} */ (update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                /** @type {?} */\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                /** @type {?} */\n                const toDelete = (/** @type {?} */ (update.value));\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    /** @type {?} */\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter((/**\n                     * @param {?} value\n                     * @return {?}\n                     */\n                    value => toDelete.indexOf(value) === -1));\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => fn((/** @type {?} */ (this.normalizedNames.get(key))), (/** @type {?} */ (this.headers.get(key))))));\n    }\n}\nif (false) {\n    /**\n     * Internal map of lowercase header names to values.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.headers;\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.normalizedNames;\n    /**\n     * Complete the lazy initialization of this object (needed before reading).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyInit;\n    /**\n     * Queued updates to be materialized the next initialization.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyUpdate;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/params.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@publicApi\n *\n * @record\n */\nfunction HttpParameterCodec() { }\nif (false) {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeValue = function (value) { };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeValue = function (value) { };\n}\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * \\@publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param {?} key The key name.\n     * @return {?} The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param {?} value The value.\n     * @return {?} The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param {?} key The encoded key name.\n     * @return {?} The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param {?} value The encoded value.\n     * @return {?} The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    /** @type {?} */\n    const map = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((/**\n         * @param {?} param\n         * @return {?}\n         */\n        (param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            /** @type {?} */\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        }));\n    }\n    return map;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * @record\n */\nfunction Update$1() { }\nif (false) {\n    /** @type {?} */\n    Update$1.prototype.param;\n    /** @type {?|undefined} */\n    Update$1.prototype.value;\n    /** @type {?} */\n    Update$1.prototype.op;\n}\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpParamsOptions() { }\nif (false) {\n    /**\n     * String representation of the HTTP parameters in URL-query-string format.\n     * Mutually exclusive with `fromObject`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromString;\n    /**\n     * Object map of the HTTP parameters. Mutually exclusive with `fromString`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromObject;\n    /**\n     * Encoding codec used to parse and serialize the parameters.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.encoder;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * \\@publicApi\n */\nclass HttpParams {\n    /**\n     * @param {?=} options\n     */\n    constructor(options = (/** @type {?} */ ({}))) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => {\n                /** @type {?} */\n                const value = ((/** @type {?} */ (options.fromObject)))[key];\n                (/** @type {?} */ (this.map)).set(key, Array.isArray(value) ? value : [value]);\n            }));\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param {?} param The parameter name.\n     * @return {?} True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param {?} param The parameter name.\n     * @return {?} The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        /** @type {?} */\n        const res = (/** @type {?} */ (this.map)).get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param {?} param The parameter name.\n     * @return {?} All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @return {?} The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from((/** @type {?} */ (this.map)).keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value to add.\n     * @return {?} A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value.\n     * @return {?} A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param {?} param The parameter name.\n     * @param {?=} value The value to remove, if provided.\n     * @return {?} A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            /** @type {?} */\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return (/** @type {?} */ ((/** @type {?} */ (this.map)).get(key))).map((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => eKey + '=' + this.encoder.encodeValue(value)))\n                .join('&');\n        }))\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter((/**\n         * @param {?} param\n         * @return {?}\n         */\n        param => param !== ''))\n            .join('&');\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpParams((/** @type {?} */ ({ encoder: this.encoder })));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => (/** @type {?} */ (this.map)).set(key, (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (this.cloneFrom)).map)).get(key))))));\n            (/** @type {?} */ (this.updates)).forEach((/**\n             * @param {?} update\n             * @return {?}\n             */\n            update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        /** @type {?} */\n                        const base = (update.op === 'a' ? (/** @type {?} */ (this.map)).get(update.param) : undefined) || [];\n                        base.push((/** @type {?} */ (update.value)));\n                        (/** @type {?} */ (this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            /** @type {?} */\n                            let base = (/** @type {?} */ (this.map)).get(update.param) || [];\n                            /** @type {?} */\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                (/** @type {?} */ (this.map)).set(update.param, base);\n                            }\n                            else {\n                                (/** @type {?} */ (this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            (/** @type {?} */ (this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            }));\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.map;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.encoder;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.updates;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.cloneFrom;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/request.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n * @record\n */\nfunction HttpRequestInit() { }\nif (false) {\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.headers;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.reportProgress;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.params;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.responseType;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.withCredentials;\n}\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpRequest {\n    /**\n     * @param {?} method\n     * @param {?} url\n     * @param {?=} third\n     * @param {?=} fourth\n     */\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        /** @type {?} */\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? (/** @type {?} */ (third)) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = (/** @type {?} */ (third));\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            /** @type {?} */\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                /** @type {?} */\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                /** @type {?} */\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return ((/** @type {?} */ (this.body))).toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        /** @type {?} */\n        const method = update.method || this.method;\n        /** @type {?} */\n        const url = update.url || this.url;\n        /** @type {?} */\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        /** @type {?} */\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        /** @type {?} */\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        /** @type {?} */\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        /** @type {?} */\n        let headers = update.headers || this.headers;\n        /** @type {?} */\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((/**\n                 * @param {?} headers\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (headers, name) => headers.set(name, (/** @type {?} */ (update.setHeaders))[name])), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((/**\n             * @param {?} params\n             * @param {?} param\n             * @return {?}\n             */\n            (params, param) => params.set(param, (/** @type {?} */ (update.setParams))[param])), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\nif (false) {\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     * @type {?}\n     */\n    HttpRequest.prototype.body;\n    /**\n     * Outgoing headers for this request.\n     * @type {?}\n     */\n    HttpRequest.prototype.headers;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     * @type {?}\n     */\n    HttpRequest.prototype.reportProgress;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     * @type {?}\n     */\n    HttpRequest.prototype.withCredentials;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     * @type {?}\n     */\n    HttpRequest.prototype.responseType;\n    /**\n     * The outgoing HTTP request method.\n     * @type {?}\n     */\n    HttpRequest.prototype.method;\n    /**\n     * Outgoing URL parameters.\n     * @type {?}\n     */\n    HttpRequest.prototype.params;\n    /**\n     * The outgoing URL with all URL parameters set.\n     * @type {?}\n     */\n    HttpRequest.prototype.urlWithParams;\n    /** @type {?} */\n    HttpRequest.prototype.url;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/response.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst HttpEventType = {\n    /**\n     * The request was sent out over the wire.\n     */\n    Sent: 0,\n    /**\n     * An upload progress event was received.\n     */\n    UploadProgress: 1,\n    /**\n     * The response status code and headers were received.\n     */\n    ResponseHeader: 2,\n    /**\n     * A download progress event was received.\n     */\n    DownloadProgress: 3,\n    /**\n     * The full response including the body was received.\n     */\n    Response: 4,\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = 'Sent';\nHttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';\nHttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';\nHttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';\nHttpEventType[HttpEventType.Response] = 'Response';\nHttpEventType[HttpEventType.User] = 'User';\n/**\n * Base interface for progress events.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpProgressEvent() { }\nif (false) {\n    /**\n     * Progress event type is either upload or download.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.type;\n    /**\n     * Number of bytes uploaded or downloaded.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.loaded;\n    /**\n     * Total number of bytes to upload or download. Depending on the request or\n     * response, this may not be computable and thus may not be present.\n     * @type {?|undefined}\n     */\n    HttpProgressEvent.prototype.total;\n}\n/**\n * A download progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpDownloadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpDownloadProgressEvent.prototype.type;\n    /**\n     * The partial response body as downloaded so far.\n     *\n     * Only present if the responseType was `text`.\n     * @type {?|undefined}\n     */\n    HttpDownloadProgressEvent.prototype.partialText;\n}\n/**\n * An upload progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpUploadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUploadProgressEvent.prototype.type;\n}\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpSentEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpSentEvent.prototype.type;\n}\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction HttpUserEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUserEvent.prototype.type;\n}\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n * @record\n */\nfunction HttpJsonParseError() { }\nif (false) {\n    /** @type {?} */\n    HttpJsonParseError.prototype.error;\n    /** @type {?} */\n    HttpJsonParseError.prototype.text;\n}\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     * @param {?} init\n     * @param {?=} defaultStatus\n     * @param {?=} defaultStatusText\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\nif (false) {\n    /**\n     * All response headers.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.headers;\n    /**\n     * Response status code.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.status;\n    /**\n     * Textual description of response status code.\n     *\n     * Do not depend on this.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.statusText;\n    /**\n     * URL of the resource retrieved, or null if not available.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.url;\n    /**\n     * Whether the status code falls in the 2xx range.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.ok;\n    /**\n     * Type of the response, narrowed to either the full response or the header.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.type;\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpHeaderResponse.prototype.type;\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /**\n     * The response body, or `null` if one was not returned.\n     * @type {?}\n     */\n    HttpResponse.prototype.body;\n    /** @type {?} */\n    HttpResponse.prototype.type;\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    /**\n     * @param {?} init\n     */\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpErrorResponse.prototype.name;\n    /** @type {?} */\n    HttpErrorResponse.prototype.message;\n    /** @type {?} */\n    HttpErrorResponse.prototype.error;\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     * @type {?}\n     */\n    HttpErrorResponse.prototype.ok;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/client.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * \\@usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * \\@publicApi\n */\nclass HttpClient {\n    /**\n     * @param {?} handler\n     */\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(first, url, options = {}) {\n        /** @type {?} */\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            /** @type {?} */\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            /** @type {?} */\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams((/** @type {?} */ ({ fromObject: options.params })));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, (/** @type {?} */ (url)), (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        /** @type {?} */\n        const events$ = of(req).pipe(concatMap((/**\n         * @param {?} req\n         * @return {?}\n         */\n        (req) => this.handler.handle(req))));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        /** @type {?} */\n        const res$ = (/** @type {?} */ (events$.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => event instanceof HttpResponse)))));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        })));\n                    case 'blob':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        })));\n                    case 'text':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        })));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => res.body)));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param {?} url     The endpoint URL.\n     * @param {?=} options The HTTP options to send with the request.\n     *\n     * @return {?}\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @template T\n     * @param {?} url The resource URL.\n     * @param {?} callbackParam The callback function name.\n     *\n     * @return {?}\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\nHttpClient.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\n/** @nocollapse */\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n        type: Injectable\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpClient.prototype.handler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/interceptor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * \\@publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * \\@usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the\n * interceptors provided in the root module.\n *\n * @record\n */\nfunction HttpInterceptor() { }\nif (false) {\n    /**\n     * Identifies and handles a given HTTP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    HttpInterceptor.prototype.intercept = function (req, next) { };\n}\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    /**\n     * @param {?} next\n     * @param {?} interceptor\n     */\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.next;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.interceptor;\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\nNoopInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/jsonp.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n/** @type {?} */\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n * @abstract\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * \\@publicApi\n */\nclass JsonpClientBackend {\n    /**\n     * @param {?} callbackMap\n     * @param {?} document\n     */\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @private\n     * @return {?}\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            /** @type {?} */\n            const callback = this.nextCallback();\n            /** @type {?} */\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            /** @type {?} */\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            /** @type {?} */\n            let body = null;\n            // Whether the response callback has been called.\n            /** @type {?} */\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            /** @type {?} */\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (/**\n             * @param {?=} data\n             * @return {?}\n             */\n            (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            });\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            /** @type {?} */\n            const cleanup = (/**\n             * @return {?}\n             */\n            () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            });\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            /** @type {?} */\n            const onLoad = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body,\n                    status: 200,\n                    statusText: 'OK',\n                    url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            });\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            });\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            });\n        }));\n    }\n}\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\nJsonpClientBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\n/** @nocollapse */\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.callbackMap;\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.document;\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * \\@publicApi\n */\nclass JsonpInterceptor {\n    /**\n     * @param {?} jsonp\n     */\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle((/** @type {?} */ (req)));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\nJsonpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\n/** @nocollapse */\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpInterceptor.prototype.jsonp;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/xhr.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@publicApi\n * @abstract\n */\nclass XhrFactory {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    XhrFactory.prototype.build = function () { };\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() {\n        return (/** @type {?} */ ((new XMLHttpRequest())));\n    }\n}\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };\nBrowserXhr.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BrowserXhr, factory: BrowserXhr.ɵfac });\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/**\n * Tracks a response from the server that does not yet have a body.\n * @record\n */\nfunction PartialResponse() { }\nif (false) {\n    /** @type {?} */\n    PartialResponse.prototype.headers;\n    /** @type {?} */\n    PartialResponse.prototype.status;\n    /** @type {?} */\n    PartialResponse.prototype.statusText;\n    /** @type {?} */\n    PartialResponse.prototype.url;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * \\@publicApi\n */\nclass HttpXhrBackend {\n    /**\n     * @param {?} xhrFactory\n     */\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            /** @type {?} */\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((/**\n             * @param {?} name\n             * @param {?} values\n             * @return {?}\n             */\n            (name, values) => xhr.setRequestHeader(name, values.join(','))));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                /** @type {?} */\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                /** @type {?} */\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = (/** @type {?} */ (((responseType !== 'json') ? responseType : 'text')));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            /** @type {?} */\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            /** @type {?} */\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            /** @type {?} */\n            const partialFromXhr = (/**\n             * @return {?}\n             */\n            () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                /** @type {?} */\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                /** @type {?} */\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                /** @type {?} */\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                /** @type {?} */\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            });\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            /** @type {?} */\n            const onLoad = (/**\n             * @return {?}\n             */\n            () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                /** @type {?} */\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                /** @type {?} */\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    /** @type {?} */\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = (/** @type {?} */ ({ error, text: body }));\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            });\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                const { url } = partialFromXhr();\n                /** @type {?} */\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            });\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            /** @type {?} */\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onDownProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                /** @type {?} */\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            });\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onUpProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                /** @type {?} */\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            });\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send((/** @type {?} */ (reqBody)));\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            });\n        }));\n    }\n}\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(XhrFactory)); };\nHttpXhrBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\n/** @nocollapse */\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n        type: Injectable\n    }], function () { return [{ type: XhrFactory }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXhrBackend.prototype.xhrFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/xsrf.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\n/** @type {?} */\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpXsrfTokenExtractor {\n}\nif (false) {\n    /**\n     * Get the XSRF token to use with an outgoing request.\n     *\n     * Will be called for every request, so the token may change between requests.\n     * @abstract\n     * @return {?}\n     */\n    HttpXsrfTokenExtractor.prototype.getToken = function () { };\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    /**\n     * @param {?} doc\n     * @param {?} platform\n     * @param {?} cookieName\n     */\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        /** @type {?} */\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\nHttpXsrfCookieExtractor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\n/** @nocollapse */\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_COOKIE_NAME]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastCookieString;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastToken;\n    /**\n     * \\@internal for testing\n     * @type {?}\n     */\n    HttpXsrfCookieExtractor.prototype.parseCount;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.doc;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.cookieName;\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    /**\n     * @param {?} tokenService\n     * @param {?} headerName\n     */\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        /** @type {?} */\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        /** @type {?} */\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\nHttpXsrfInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\n/** @nocollapse */\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_HEADER_NAME]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.tokenService;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.headerName;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    /**\n     * @param {?} backend\n     * @param {?} injector\n     */\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        if (this.chain === null) {\n            /** @type {?} */\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((/**\n             * @param {?} next\n             * @param {?} interceptor\n             * @return {?}\n             */\n            (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nHttpInterceptingHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\n/** @nocollapse */\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n        type: Injectable\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.chain;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.backend;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.injector;\n}\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((/**\n     * @param {?} next\n     * @param {?} interceptor\n     * @return {?}\n     */\n    (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * \\@publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param {?=} options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     * @return {?}\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); }, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\nHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); }, providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        BrowserXhr,\n        { provide: XhrFactory, useExisting: BrowserXhr },\n    ], imports: [[\n            HttpClientXsrfModule.withOptions({\n                cookieName: 'XSRF-TOKEN',\n                headerName: 'X-XSRF-TOKEN'\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n        type: NgModule,\n        args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN'\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); }, providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h };\n\n//# sourceMappingURL=http.js.map","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IconsComponent } from './icons.component';\n\nconst routes: Routes = [{ path: '', component: IconsComponent }];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class IconsRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport * as lineIconList from '../../assets/icons/icon-list.json';\nimport * as icons8List from '../../assets/icons/icons8/categories.json';\n\nexport interface ILineIcons {\n    iconList: string;\n}\n\nexport interface IIcons8 {\n    name: string;\n    link: string;\n    icons: Array<string>[];\n}\n\n@Component({\n    selector: 'app-icons',\n    templateUrl: './icons.component.html',\n    styleUrls: ['./icons.component.scss'],\n})\nexport class IconsComponent implements OnInit {\n    lineIcons: ILineIcons = (lineIconList as any).default;\n    icons8: IIcons8[] = (icons8List as any).default;\n\n    visibleCategory: object;\n    visibleCategoryName: string;\n\n    hostname = window.location.host;\n\n    constructor() {}\n\n    ngOnInit(): void {\n        this.visibleCategory = {};\n        this.icons8.forEach((icon) => {\n            this.visibleCategory[icon.name] = false;\n        });\n        this.visibleCategory[Object.keys(this.visibleCategory)[0]] = true;\n        this.visibleCategoryName = Object.keys(this.visibleCategory)[0];\n    }\n\n    showCategory(category: string) {\n        return this.visibleCategory[category];\n    }\n\n    toggleCategory(category: string) {\n        if (this.visibleCategory[category]) {\n            return;\n        }\n        this.visibleCategory[category] = true;\n        this.visibleCategory[this.visibleCategoryName] = false;\n        this.visibleCategoryName = category;\n    }\n}\n","<div class=\"bg-discord-light text-2xl text-white pl-8 py-3 shadow-sm\">\n    rattie icons\n</div>\n<div class=\"bg-discord-dark p-10 pt-16 justify-center flex min-h-full\">\n    <div\n        class=\"rounded-md bg-discord-light max-w-1024px flex flex-wrap p-4 justify-center\"\n    >\n        <div class=\"w-full justify-center\">\n            <div class=\"text-4xl text-white p-6\">Categories</div>\n            <div class=\"flex flex-wrap w-full justify-center\">\n                <div class=\"flex flex-wrap justify-center\">\n                    <div\n                        *ngFor=\"let category of this.icons8\"\n                        class=\"rounded-full border border-white text-white text-center cursor-pointer m-1 py-1 px-4 select-none\"\n                        [ngClass]=\"\n                            this.showCategory(category.name)\n                                ? 'bg-green-800 border-green-400 text-green-400 hover:border-green-600 hover:text-green-600'\n                                : 'hover:border-green-400 hover:text-green-400 hover:bg-green-600'\n                        \"\n                        (click)=\"this.toggleCategory(category.name)\"\n                    >\n                        {{ category.name }}\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div *ngFor=\"let category of this.icons8\" class=\"px-6 w-full\">\n            <div *ngIf=\"this.showCategory(category.name)\">\n                <div class=\"text-3xl text-white p-6\">\n                    {{ category.name }}\n                </div>\n                <div class=\"rounded-md w-full flex flex-wrap p-4\">\n                    <div\n                        *ngFor=\"let icon of category.icons\"\n                        class=\"flex w-10 h-10 m-2 cursor-pointer transition duration-500 ease-in-out transform hover:scale-110\"\n                    >\n                        <img\n                            cdkCopyToClipboard=\"https://img.icons8.com/ios/100/ffffff/{{\n                                icon\n                            }}\"\n                            src=\"https://img.icons8.com/ios/100/ffffff/{{\n                                icon\n                            }}\"\n                            alt=\"{{ icon }}\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { IconsRoutingModule } from './icons-routing.module';\nimport { IconsComponent } from './icons.component';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\n\n@NgModule({\n    declarations: [IconsComponent],\n    imports: [\n        CommonModule,\n        IconsRoutingModule,\n        ClipboardModule,\n        HttpClientModule,\n    ],\n})\nexport class IconsModule {}\n"]}